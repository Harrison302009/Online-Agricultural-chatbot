datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String        @id @default(cuid())
    name                   String?
    email                  String?       @unique
    password               String?
    username               String?       @unique
    lastLogin              DateTime      @default(now())
    phoneNumber            String?
    country                String        @default("Unknown")
    address                String        @default("Unknown")
    role                   String        @default("user")
    status                 String        @default("offline")
    isBanned               Boolean       @default(false)
    plan                   String        @default("new")
    receivedMessage        Boolean       @default(false)
    hasPendingApplications Boolean       @default(false)
    ApplicationStatus      String?
    seenNotifications      Int           @default(0)
    emailVerified          DateTime?
    image                  String?       @default("inc9foypm6vykbdcdqya")
    accounts               Account[]
    sessions               Session[]
    Message                Message[]
    ChatMessage            ChatMessage[]
    MessageSent            MessageSent[]
    Exam                   Exam[]
    Posts                  Posts[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Application models
model Message {
    id        String    @id @default(cuid())
    content   String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    ownerId   String?
    owner     User?     @relation(fields: [ownerId], references: [id])
}

model ChatMessage {
    id        Int      @id @default(autoincrement())
    message   String
    image     String?
    createdAt DateTime @default(now())
    ownerId   String?
    owner     User?    @relation(fields: [ownerId], references: [id])
}

model MessageSent {
    id        Int      @id @default(autoincrement())
    message   String
    image     String?
    sent      Boolean  @default(false)
    createdAt DateTime @default(now())
    ownerId   String?
    owner     User?    @relation(fields: [ownerId], references: [id])
}

model RegisteredUsers {
    email    String  @id @unique @default("test@example.com")
    password String?
}

model Exam {
    examId      String  @id @default(cuid())
    userId      String?
    user        User?   @relation(fields: [userId], references: [id])
    Answer1     String?
    Certificate String?
    Answer2     String?
    Answer3     String?
    Answer4     String?
    Answer5     String?
    Answer6     String?
    Answer7     String?
    Answer8     String?
    Answer9     String?
    Answer10    String?
    score       Float?
}

model Posts {
    id        String     @id @default(cuid())
    avatar    String?
    content   String?
    createdAt DateTime   @default(now())
    updatedAt DateTime?  @updatedAt
    author    User?      @relation(fields: [authorId], references: [id])
    authorId  String?
    name      String?
    image1    String?
    image2    String?
    image3    String?
    image4    String?
    image5    String?
    video     String?
    Comments  Comments[]
}

model Comments {
    id          String   @id @default(cuid())
    value       String?
    avatar      String?
    name        String?
    commentid   String?
    commentBase Posts?   @relation(fields: [commentid], references: [id])
    createdAt   DateTime @default(now())
}
